plugins {
    id "me.modmuss50.mod-publish-plugin" version "0.3.0"
}

subprojects {

    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    def env = System.getenv();
    ext.ENV = env

    version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}+mc${minecraft_version}"
    group = parent.maven_group

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'Nanite Releases'
            url = 'https://maven.nanite.dev/releases'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    processResources {

        def buildProps = project.properties.clone()

        buildProps.put('file', [jarVersion: project.version])

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml']) {

            expand buildProps
        }
    }
}


publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":Fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "${project.name} Fabric ${mod_version}+mc${minecraft_version}"
        modLoaders.add("fabric")
    }

    def forgeOptions = publishOptions {
        file = project.provider { project(":Forge").tasks.jar }.flatMap { it.archiveFile }
        displayName = "${project.name} Forge ${mod_version}+mc${minecraft_version}"
        modLoaders.add("forge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
    }

    if (providers.environmentVariable("MODRINTH_TOKEN").getOrNull() != null) {
        modrinth("modrinthFabric") {
            from(modrinthOptions, fabricOptions)
            requires {
                slug = "fabric-api"
            }
        }

        modrinth("modrinthForge") {
            from(modrinthOptions, forgeOptions)
        }
    }
}